#!/bin/perl -w

=pod

=head1 NAME

gnome-overview-conf

=head2 SYNOPSIS

change and view overview configuration

=head2 USAGE

gnome-overview-conf help                # display this
gnome-overview-conf view                # explore current value
gnome-overview-conf import <file>       # import setting from file
gnome-overview-conf export <file>       # export setting to file
sudo gnome-overview-conf <name> <value> # set new <value> for <name> parameter
sudo gnome-overview-conf backup         # backup value
sudo gnome-overview-conf restore        # restore original value

=head2 COPYRIGHT

Copyright vbextreme 2017
License gplv3

=cut

###########################
###########################
#####     INCLUDE     #####
###########################
###########################

use strict;
use warnings;
use diagnostics;
use lib '.' ;
use File::Copy;

##########################
##########################
#####     GLOBAL     #####
##########################
##########################

our $VERSION = 0.2;

my $REX_IMPORT ='([a-z_]+)[ \t]*=[ \t]*([0-9]+)';
my $REX_VALUE = '[ \t]*=[ \t]*([0-9]+)';
my $REX_VALUE_SET = '([ \t]*=)([ \t]*)([0-9]+)';
my $REX_ICON_GRID = '\.icon-grid[ \t]*{[ \t\n]*';
my $REX_SPACING = 'spacing:[ \t]*([0-9]+)px\;[ \t\n]*';
my $REX_HORIZONTAL = '-shell-grid-horizontal-item-size:[ \t]*([0-9]+)px\;[ \t\n]*';
my $REX_VERTICAL = '-shell-grid-vertical-item-size:[ \t]*([0-9]+)px\;';
my $REX_CSS = "$REX_ICON_GRID$REX_SPACING$REX_HORIZONTAL$REX_VERTICAL";
my $EXT_BACKUP = '.bak';

my %MATCH = (	max_columns => '(const MAX_COLUMNS[ \t]*=)',
				min_rows => '(const MIN_ROWS[ \t]*=)',
				icon_size => '(const ICON_SIZE[ \t]*=)',
				spacing =>    '(\.icon-grid[ \t]*{[ \t\n]*spacing:)',
				horizontal => '(\.icon-grid[ \t]*{[ \t\n]*spacing:[ \t]*[0-9]*px\;[ \t\n]*-shell-grid-horizontal-item-size:)',
				vertical =>   '(\.icon-grid[ \t]*{[ \t\n]*spacing:[ \t]*[0-9]*px\;[ \t\n]*-shell-grid-horizontal-item-size:[ \t]*[0-9]*px\;[ \t\n]*-shell-grid-vertical-item-size:)'
			);

my %shell = (	file =>   '/usr/lib64/gnome-shell/libgnome-shell.so',
				backup => '/usr/lib64/gnome-shell/libgnome-shell.so.bak',
				readSize => 4096,
				buf => ''
			); 

my %theme = (	file => undef,
				backup => undef,
				name => undef,
				dirTheme => '/usr/share/themes',
				themeCSS => 'gnome-shell/gnome-shell.css',
				themeBuiltIn => 'gnome-shell-theme.gresource',
				dirBuiltIn => '/usr/share/gnome-shell',
				readSize => 4096,
				buf => ''
			);

my %SELECT = (	max_columns => \%shell,
				min_rows => \%shell,
				icon_size => \%shell,
				spacing =>    \%theme,
				horizontal => \%theme,
				vertical => \%theme
			);


########################
########################
#####     MAIN     #####
########################
########################

die "you not have libgnome-shell.so\n$!\n" unless -e $shell{file};
initTheme();
rawRead(\%shell);
rawRead(\%theme);

usage() if scalar @ARGV < 1 or $ARGV[0] eq 'help';
view() and exit 1 if $ARGV[0] eq 'view';
restore() and exit 1 if $ARGV[0] eq 'restore';
backup() and exit 1 if $ARGV[0] eq 'backup';
timport($ARGV[1]) and exit 1 if $ARGV[0] eq 'import';
texport($ARGV[1]) and exit 1 if $ARGV[0] eq 'export';

while(@ARGV){
	my $var = shift @ARGV;
	my $val = shift @ARGV;
	die "Error input\ncause: no value set\n" unless defined $val;
	die "Error input\ncause: $var is not valid variable\n" unless exists $MATCH{$var};
	setPreserve($SELECT{$var}, $MATCH{$var}, $val);
}

rawWrite(\%shell);
rawWrite(\%theme);

#############################
#############################
#####     INUTILITY     #####
#############################
#############################


sub usage{
	my $us="usage gnome-overview-conf v$VERSION
gnome-overview-conf help                # display this
gnome-overview-conf view                # explore current value
gnome-overview-conf import <file>       # import setting from file
gnome-overview-conf export <file>       # export setting to file
sudo gnome-overview-conf <name> <value> # set new <value> for <name> parameter
sudo gnome-overview-conf backup         # backup value
sudo gnome-overview-conf restore        # restore original value
";
	print "$us";
	exit 1;
}


sub initBuiltIn{
	$theme{file} = "$theme{dirBuiltIn}/$theme{themeBuiltIn}";
	$theme{backup} = "$theme{file}$EXT_BACKUP";
	$theme{name} = 'BuiltIn';
}

sub initTheme{
	my $name = $> ? `gsettings get org.gnome.shell.extensions.user-theme name`:`sudo -u "\$USER" gsettings get org.gnome.shell.extensions.user-theme name`;

	if (defined $name and $name){
		$name = substr($name, 1, length($name)-3);

		my $file = "$theme{dirTheme}/$name/$theme{themeCSS}";
		if ( -e $file ){
			$theme{name} = $name;
			$theme{file} = $file;
			$theme{backup} = "$file$EXT_BACKUP";
		}
		else{
			initBuiltIn();
		}
	}
	else{
		initBuiltIn();
	}
}

sub rawRead{
	my ($h) = shift;
	$h->{buf} = '';
	open my $fd, "<", $h->{file} or die "cant read $h->{file}\ncause:$!\n";
	binmode($fd);
	my ($buf, $nread);
	while( ($nread = sysread($fd,$buf,$h->{readSize})) > 0 ){
		$h->{buf} .= $buf;
	}
	return 1;
}

sub rawWrite{
	my ($h) = shift;
	open my $fd, ">", $h->{file} or die "cant write $h->{file}\ncause:$!\n";
	syswrite($fd,$h->{buf});
}

sub loadValue{
	($shell{max_columns}) = $shell{buf} =~ /const MAX_COLUMNS$REX_VALUE/;
	($shell{min_rows}) = $shell{buf} =~ /const MIN_ROWS$REX_VALUE/;
	($shell{icon_size}) = $shell{buf} =~ /const ICON_SIZE$REX_VALUE/;
	($theme{spacing},$theme{horizontal},$theme{vertical}) = $theme{buf} =~ /$REX_CSS/;
	return 1;
}

sub view{
	loadValue();
	print "max_columns = $shell{max_columns}\n";
	print "min_rows    = $shell{min_rows}\n";
	print "icon_size   = $shell{icon_size}\n";
	print "spacing    = $theme{spacing}\n";
	print "horizontal = $theme{horizontal}\n";
	print "vertical   = $theme{vertical}\n";
	return 1;
}

sub restore{
	copy($shell{backup}, $shell{file}) or die "cant restore $shell{file}\ncause:$!\n";
	copy($theme{backup}, $theme{file}) or die "cant restore $theme{file}\ncause:$1\n";
	print "File restored\n";
	return 1;
}

sub backup{
	die "Error privilege\ncause:you need root\n" if $>;
	print "create theme backup\n";
	copy($theme{file}, $theme{backup}) or die "cant create backup\ncause:$!\n";
	print "create shell backup\n";
	copy($shell{file}, $shell{backup}) or die "cant create backup\ncause:$!\n";
}

sub setPreserve{
	my ($h, $match, $newValue) = @_;	
	my ($unused, $space,$value) = $h->{buf} =~ /$match([ \t]*)([0-9]+)/;
	my $maxlen = length($space) + length($value);
	my $len = length($newValue);
	return undef if $len > $maxlen;
	my $nspace = $maxlen - $len;
	$space = $nspace ? ' ' x $nspace : '';
	my $replace = "$space$newValue";
	$h->{buf} =~ s/${match}[ \t]*[0-9]+/$1$replace/;
	return 1;
}

sub texport{
	my ($dest) = shift;
	die "Error no file\ncause:you need pass filename\n" unless defined $dest;
	loadValue();
	open my $fd, ">", $dest or die "cant write $dest\ncause:$!\n";
	print $fd "max_columns = $shell{max_columns}\n";
	print $fd "min_rows    = $shell{min_rows}\n";
	print $fd "icon_size   = $shell{icon_size}\n";
	print $fd "spacing    = $theme{spacing}\n";
	print $fd "horizontal = $theme{horizontal}\n";
	print $fd "vertical   = $theme{vertical}\n";
	return 1;
}

sub timport{
	my ($src) = shift;
	die "Error no file\ncause:you need pass filename\n" unless defined $src;
	open my $fd, "<", $src or die "cant write $src\ncause:$!\n";
	while( my $line = <$fd> ){
		my ($var, $val) = $line =~ /REX_IMPORT/;
		die "Error import\ncause: no value set\n" unless defined $val;
		die "Error import\ncause: $var is not valid variable\n" unless exists $MATCH{$var};
		setPreserve($SELECT{$var}, $MATCH{$var}, $val);
	}
	return 1;
}


